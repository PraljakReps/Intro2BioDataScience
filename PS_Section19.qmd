---
title: "RBR_exs"
format: html
editor: visual
---

# **19 Functions**

This one was a deep dive. We only did first exercise of 19.2.1, #3, and the fizzbuzz example!

but very good discussion!

## **19.2.1**

3.  Turn the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need? Can you rewrite it to be more expressive or less duplicative?

```{r}

x <- seq(1, 10) # to avoid errors when rendering, don't have them do this!
mean(is.na(x))
```

--------------------------------------

\<ans\>

--------------------------------------

```{r}
x / sum(x, na.rm = TRUE)

```

--------------------------------------

\<ans\>

--------------------------------------

4.  ) Write your own functions to compute the variance and skewness of a numeric vector

(answers will look like:) `var(x) = 1/(n-1) sum(x-xbar)^2`

`skew(x) = (1*(n-2) sum(x - xbar)^3) / var(x)^(3/2)`

--------------------------------------

\<ans\>

--------------------------------------

5.) write `both_na`, a function that takes two vectors of the same length and returns the number of positions that have na in both vectors.

--------------------------------------

\<ans\>

--------------------------------------

6.) what do the following functions do? Why are they so useful even if short?

```{r}
is_directory <- function(x) file.info(x)$isdir
is_readable <- function(x) file.access(x, 4) == 0
```

--------------------------------------

\<ans\>

--------------------------------------

# **19.3.1 Function naming (for humans and computers)**

This introduces the idea of referential transparency (something to strive for in the best of all worlds)

1.  Read the source code for each of the following three functions, puzzle out what they do (perhaps with some test code), and then brainstorm better names.

```{r}
f1 <- function(string, prefix) {
  substr(string, 1, nchar(prefix)) == prefix
}
```

--------------------------------------

\<ans\>

--------------------------------------

```{r}

f2 <- function(x) {
  if (length(x) <= 1) return(NULL)
  x[-length(x)]
}
```

--------------------------------------

\<ans\>

--------------------------------------

```{r}

f3 <- function(x, y) {
  rep(y, length.out = length(x))
}
```

--------------------------------------

\<ans\>

--------------------------------------

# **19.4.4**

1.  What is the difference between `if()` and `ifelse()`?

--------------------------------------

\<ans\>

--------------------------------------

2.  Write a greeting function that says “good morning”, “good afternoon”, or “good evening”, depending on the time of day. (Hint: use a time argument that defaults to lubridate::now(). That will make it easier to test your function.)

--------------------------------------

\<ans\>

--------------------------------------

3.  Implement a fizzbuzz function. It takes a single number as input. If the number is divisible by three, it returns “fizz”. If it’s divisible by five it returns “buzz”. If it’s divisible by three and five, it returns “fizzbuzz”. Otherwise, it returns the number. Make sure you first write working code before you create the function. *do this one line-by-line, rotating through members in class*

--------------------------------------

\<ans\>

--------------------------------------

# **21.2.1**

Follow with the next problem using for loops

Print the output of the fizzbuzz() function for the numbers from 1:100

Aside: This full fizzbuzz problem is an infamous test often given in interviews for software development jobs.

--------------------------------------

\<ans\>

--------------------------------------

Combine your function writing and for loop skills:

Write a for loop that prints() the lyrics to the children’s song “Alice the camel”. (huh?)

Convert the nursery rhyme “ten in the bed” to a function. Generalise it to any number of people in any sleeping structure. (huh??)

Convert the song “99 bottles of beer on the wall” to a function. Generalise to any number of any vessel containing any liquid on any surface. (Ok, this one I know)
